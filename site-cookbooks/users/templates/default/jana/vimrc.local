" {{{ global settings

" use the wildmenu
set wildmenu
set wildmode=full

" reload files changed outside of vim
set autoread

" use hidden buffers and write on quit
set hidden
set autowriteall

" no backup files (we have git after all)
set nobackup

" highlight current line
set cursorline

" easy pasting
set pastetoggle=<F4>
" }}}

" {{{ syntax- & filetypes

" ruby & co
NeoBundle 'vim-ruby/vim-ruby'
NeoBundle 'tpope/vim-rails'
NeoBundle 'tpope/vim-cucumber'
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
let g:ruby_path = '~/.rvm/rubies/default/bin/ruby'

" JavaScript & derivatives
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'elzr/vim-json'
NeoBundle 'kchmck/vim-coffee-script'

" expand tabs in C
autocmd FileType c,cpp set ts=4 sw=4 tw=79 expandtab et

" use latex syntax by default
let g:tex_flavor='latex'
let g:Tex_Folding=0
" }}}

" {{{ colors & ui
NeoBundle 'hollow/vim-colors-solarized'
set t_Co=256
set background=dark
"colorscheme solarized

NeoBundle 'bling/vim-airline'
let g:airline_left_sep=''
let g:airline_right_sep=''

" This plugin is used for displaying thin vertical lines at each indentation
" level for code indented with spaces.
NeoBundle 'Yggdroot/indentLine'

NeoBundle 'corntrace/bufexplorer'
let g:bufExplorerDefaultHelp=0
let g:bufExplorerShowDirectories=0

NeoBundle 'vim-scripts/winmanager'
let g:winManagerWindowLayout = 'FileExplorer,TagList|BufExplorer'
let g:persistentBehaviour = 0
nnoremap <silent> <F8> :WMToggle<CR>

" Full path fuzzy file, buffer, mru, tag, ... finder for Vim.
NeoBundle 'kien/ctrlp.vim'
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_working_path_mode = 'ra'

if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  let g:ctrlp_use_caching = 0
endif

" Tagbar is a vim plugin for browsing the tags of source code files. It
" provides a sidebar that displays the ctags-generated tags of the current
" file, ordered by their scope.
NeoBundle 'majutsushi/tagbar'
nnoremap <silent> <F6> :TagbarOpenAutoClose<cr>

" Syntastic is a syntax checking plugin that runs files through external
" syntax checkers and displays any resulting errors to the user.
NeoBundle 'scrooloose/syntastic'
let g:syntastic_auto_jump=1
let g:syntastic_auto_loc_list=1
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_mode_map = { 'mode': 'active',
            \ 'active_filetypes': [],
            \ 'passive_filetypes': ['c', 'cpp'] }
let g:syntastic_mri_checkers = ['mri']
let g:syntastic_ruby_exec = '~/.rvm/rubies/default/bin/ruby'
" }}}

" {{{ editing
" Repeat.vim remaps . in a way that plugins can tap into it.
NeoBundle 'tpope/vim-repeat'

" This is a simple plugin that helps to end certain structures automatically.
" In Ruby, this means adding end after if, do, def and several other keywords.
NeoBundle 'tpope/vim-endwise'

" This plugin automatically adjusts 'shiftwidth' and 'expandtab' heuristically
" based on the current file, or, in the case the current file is new, blank,
" or otherwise insufficient, by looking at other files of the same type in the
" current and parent directories.
NeoBundle 'tpope/vim-sleuth'
" }}}

" {{{ completion
" neocomplete provides keyword completion system by maintaining a cache of
" keywords in the current buffer.
NeoBundle 'Shougo/neocomplete.vim'
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#enable_auto_delimiter = 1
let g:neocomplete#max_list = 15
let g:neocomplete#force_overwrite_completefunc = 1

" tab completion
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
let g:neocomplete#sources#omni#input_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'
let g:neocomplete#sources#omni#input_patterns.python = '[^. \t]\.\w*'
" }}}

" {{{ key mappings

" rename file within vim
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
nnoremap <silent> <F2> :call RenameFile()<cr>

" }}}

" vim: ft=vim
